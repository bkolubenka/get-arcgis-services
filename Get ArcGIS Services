# Reads the following properties from services and writes them to a comma-delimited file:
# ServiceName,Folder,Type,Status,FeatureService,SourcePath,Datasets,DocumentPath,ClientName,ServiceUrl,
# Cache Directory,Jobs Directory,Output Directory,wms,kml,Max Records,Min Instances,Max Instances

# You can configure you ArcGIS server username and password, server name to run script by selecting from list or input manually every time

# For HTTP calls
import httplib, urllib, json

# For system tools
import sys, os

# For reading passwords without echoing
import getpass

def main():    
  
    #Show list to user and ask for select server
    print '====================================='
    print '| 1. first.server.name              |'
    print '| 2. second.server.name             |'
    print '| 0. Connect to other servers       |'
    print '====================================='
    selectServ = raw_input(" Please select number from list: ")

    #Servers and settings
    # For first server
    if selectServ =='1':
        username = 'user'
        password = getpass.getpass("Enter password: ")
        serverName = 'first.server.name'
        serverPort = '6080'
        print 'Proccessing '+serverName
    # For second server
    elif selectServ =='2':
        username = 'user'
        password = getpass.getpass("Enter password: ")
        serverName = 'second.server.name'
        serverPort = '6080'
        print 'Proccessing '+serverName
    # Users should provide with raw input
    elif selectServ =='0':
        username = raw_input("Enter user name: ")
        password = getpass.getpass("Enter password: ")
        serverName = raw_input("Enter server name: ")
        serverPort = raw_input("Enter server port: ")
        print 'Proccessing '+serverName
    else:
        print 'Please type 1 or 2'
        exit()

    # Get the location and the name of the file to be created
    resultFile = serverName+'.csv'

    # Get a token
    token = getToken(username, password, serverName, serverPort)

    # Get the root info
    serverURL = "/arcgis/admin/services/"
    ags_services_URL = r'http://{0}:{1}/arcgis/admin/services'.format(serverName,serverPort)
    print ags_services_URL

    # This request only needs the token and the response formatting parameter 
    params = urllib.urlencode({'token': token, 'f': 'json'})

    headers = {"Content-type": "application/x-www-form-urlencoded", "Accept": "text/plain"}

    # Connect to URL and post parameters    
    httpConn = httplib.HTTPConnection(serverName, serverPort)
    httpConn.request("POST", serverURL, params, headers)

    # To Store Map Services
    map_services = []

    # Read response
    response = httpConn.getresponse()
    if (response.status != 200):
        httpConn.close()
        print "Could not read folder information."
        return
    else:
        data = response.read()
        
        # Check that data returned is not an error object
        if not assertJsonSuccess(data):          
            print "Error when reading server information. " + str(data)
            return
        else:
            print "Processed server information successfully. Now processing folders..."

        # Deserialize response into Python object
        dataObj = json.loads(data)
        httpConn.close()

        #Store the Folders in a list to loop on
        folders = dataObj["folders"]

        #Remove the System and Utilities folders
        folders.remove("System")
        folders.remove("Utilities")

        #Add an entry for the root folder
        folders.append("")

        #Create variable to count services
        servCount = 0

        #Create the summary file of services
        serviceResultFile = open(resultFile,'w')
        serviceResultFile.write("ServiceName,Folder,Type,Status,FeatureService,SourcePath,Datasets,DocumentPath,ClientName,ServiceUrl,Cache Directory,Jobs Directory,Output Directory,wms,kml,Max Records,Min Instances,Max Instances" + "\n")

        #Loop on the found folders and discover the services and write the service information
        for folder in folders:
            
            # Determine if the loop is working on the root folder or not
            if folder != "":
                folder += "/"

            # Build the URL for the current folder
            folderURL = "/arcgis/admin/services/" + folder
            params = urllib.urlencode({'token': token, 'f': 'json'})
            headers = {"Content-type": "application/x-www-form-urlencoded", "Accept": "text/plain"}

            # Connect to URL and post parameters    
            httpConn = httplib.HTTPConnection(serverName, serverPort)
            httpConn.request("POST", folderURL, params, headers)

            # Read response
            response = httpConn.getresponse()
            if (response.status != 200):
                httpConn.close()
                print "Could not read folder information."
                return
            else:
                data = response.read()
                
                # Check that data returned is not an error object
                if not assertJsonSuccess(data):          
                    print "Error when reading folder information. " + str(data)
                else:
                    print "Folder found. Processing services..."
                # Deserialize response into Python object
                dataObj = json.loads(data)
                httpConn.close()

                # Loop through each service in the folder 
                for item in dataObj['services']:
                    
                    #================================================================================================#
                    
                    if item["type"] == "GeometryServer":# and folder == "":
                        # Build the Service URL
                        if folder:
                            sUrl = "/arcgis/admin/services/%s%s.%s" %(folder,item["serviceName"], item["type"])
                            statusUrl = "/arcgis/admin/services/%s%s.%s/status" %(folder,item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s%s.%s" %(folder,item["serviceName"], item["type"])))
                        else:
                            sUrl = "/arcgis/admin/services/%s.%s" %(item["serviceName"], item["type"])
                            statusUrl = "/arcgis/admin/services/%s.%s/status" %(item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s.%s" %(item["serviceName"], item["type"])))
                                               
                        
                        httpConn.request("POST", sUrl, params, headers)
                        
                        # Get the response
                        servResponse = httpConn.getresponse()
                        readData = servResponse.read()
                        jsonOBJ = json.loads(readData)

                        # Build the Service URL to test the running status
                        

                        # Submit the request to the server
                        httpConn.request("POST", statusUrl, params, headers)
                        servStatusResponse = httpConn.getresponse()

                        # Obtain the data from the response
                        readData = servStatusResponse.read()
                        jsonOBJStatus = json.loads(readData)

                        # Build the line to write to the output file
                        
                        ln = str(jsonOBJ["serviceName"]) + "," + folder + "," + str(item["type"]) + "," + jsonOBJStatus['realTimeState'] + "," + "NA" + "," + "NA" + "," + "NA" + "," + "NA" + "," + "NA" + ","  + mapservices_URL + "," + "NA" + "," + "NA" + "," + "NA" + "," + "NA" + ","+ "NA" + ","+ "NA" + "," + str(jsonOBJ["minInstancesPerNode"]) + "," + str(jsonOBJ["maxInstancesPerNode"]) + "," +"\n"

                        # Write the results to the file
                        serviceResultFile.write(ln)

                        httpConn.close()
                        
                    elif item["type"] == "SearchServer":# and folder == "":
                        if folder:
                            sUrl = "/arcgis/admin/services/%s%s.%s" %(folder,item["serviceName"], item["type"])
                            statusUrl = "/arcgis/admin/services/%s%s.%s/status" %(folder,item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s%s.%s" %(folder,item["serviceName"], item["type"])))
                        else:
                            sUrl = "/arcgis/admin/services/%s.%s" %(item["serviceName"], item["type"])
                            statusUrl = "/arcgis/admin/services/%s.%s/status" %(item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s.%s" %(item["serviceName"], item["type"])))                       
                        
                        httpConn.request("POST", sUrl, params, headers)

                        # Get the response
                        servResponse = httpConn.getresponse()
                        readData = servResponse.read()
                        jsonOBJ = json.loads(readData)


                        # Submit the request to the server
                        httpConn.request("POST", statusUrl, params, headers)

                        # Get the response
                        servStatusResponse = httpConn.getresponse()
                        readData = servStatusResponse.read()
                        jsonOBJStatus = json.loads(readData)

                        # Variables
                        cacheDir = str(jsonOBJ["properties"]["jobsDirectory"])
                        
                        # Build the line to write to the output file                      
                        ln = str(jsonOBJ["serviceName"]) + "," + folder + "," + str(item["type"]) + "," + jsonOBJStatus['realTimeState'] + "," + "NA" + "," + "NA" + "," + "NA" + "," + "NA" + "," + "NA" + "," + mapservices_URL + "," + cacheDir + "," + "NA" + "," + str(jsonOBJ["properties"]["outputDir"]) + "," + "NA" + "," + "NA" + ","+ "NA" + "," + str(jsonOBJ["minInstancesPerNode"]) + "," + str(jsonOBJ["maxInstancesPerNode"]) +"\n"

                        # Write the results to the file
                        serviceResultFile.write(ln)
                        
                        httpConn.close()

                    #================================================================================================#
                        
                    elif item["type"] == "ImageServer":
                        
                        # Build the Service URL
                        if folder:
                            sUrl = "/arcgis/admin/services/%s%s.%s" %(folder,item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s%s.%s" %(folder,item["serviceName"], item["type"])))
                        else:
                            sUrl = "/arcgis/admin/services/%s.%s" %(item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s.%s" %(item["serviceName"], item["type"])))

                        # Submit the request to the server
                        httpConn.request("POST", sUrl, params, headers)

                        # Get the response
                        servResponse = httpConn.getresponse()
                        readData = servResponse.read()
                        jsonOBJ = json.loads(readData)

                        # Build the Service URL to test the running status
                        if folder:
                            statusUrl = "/arcgis/admin/services/%s%s.%s/status" %(folder,item["serviceName"], item["type"])
                        else:
                            statusUrl = "/arcgis/admin/services/%s.%s/status" %(item["serviceName"], item["type"])

                        # Submit the request to the server
                        httpConn.request("POST", statusUrl, params, headers)

                        # Get the response
                        servStatusResponse = httpConn.getresponse()
                        readData = servStatusResponse.read()
                        jsonOBJStatus = json.loads(readData)

                        # Extract the WMS properties from the response
                        wmsProps = [imageWMS for imageWMS in jsonOBJ["extensions"] if imageWMS["typeName"] == 'WMSServer']#.items()[0][1] == 'WMSServer']

                        if len(wmsProps) > 0:
                            wmsStatus = str(wmsProps[0]["enabled"])
                        else:
                            wmsStatus = "NA"

                        # Variables
                        cacheDir = str(jsonOBJ["properties"]["cacheDir"])

                        # Build the line to write to the output file
                        ln = str(jsonOBJ["serviceName"]) + "," + folder + "," + str(item["type"]) + "," + jsonOBJStatus['realTimeState'] + "," + "NA" + "," + "NA" + "," + "NA" + "," + "NA" + "," + "NA" + "," + mapservices_URL + "," + cacheDir + "," + "NA" + "," + str(jsonOBJ["properties"]["outputDir"]) + "," + wmsStatus + "," + "NA" + "," + "NA" + "," + str(jsonOBJ["minInstancesPerNode"]) + "," + str(jsonOBJ["maxInstancesPerNode"]) +"\n"

                        # Write the results to the file               
                        serviceResultFile.write(ln)
                        
                        httpConn.close()
                        
                    #================================================================================================#
                        
                    elif item["type"] == "GlobeServer":
                 
                        # Build the Service URL
                        if folder:
                            sUrl = "/arcgis/admin/services/%s%s.%s" %(folder,item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s%s.%s" %(folder,item["serviceName"], item["type"])))  
                        else:
                            sUrl = "/arcgis/admin/services/%s.%s" %(item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s.%s" %(item["serviceName"], item["type"])))
                            
                        # Submit the request to the server
                        httpConn.request("POST", sUrl, params, headers)

                        # Get the response
                        servResponse = httpConn.getresponse()
                        readData = servResponse.read()
                        jsonOBJ = json.loads(readData)

                        #Build the Service URL to test the running status
                        if folder:
                            statusUrl = "/arcgis/admin/services/%s%s.%s/status" %(folder,item["serviceName"], item["type"])
                        else:
                            statusUrl = "/arcgis/admin/services/%s.%s/status" %(item["serviceName"], item["type"])

                        # Submit the request to the server
                        httpConn.request("POST", statusUrl, params, headers)

                        # Get the response
                        servStatusResponse = httpConn.getresponse()
                        readData = servStatusResponse.read()
                        jsonOBJStatus = json.loads(readData)

                        #Variables
                        cacheDir = str(jsonOBJ["properties"]["cacheDir"])

                        # Build the line to write to the output file
                        ln = str(jsonOBJ["serviceName"]) + "," + folder + "," + str(item["type"]) + "," + jsonOBJStatus['realTimeState'] + "," + "NA" + "," + "NA" + "," + "NA" + "," + "NA" + "," + "NA" + "," + mapservices_URL + "," + cacheDir + "," + "NA" + "," + str(jsonOBJ["properties"]["outputDir"]) + "," + "NA" + "," + "NA" + "," + str(jsonOBJ["properties"]["maxRecordCount"]) + "," + str(jsonOBJ["minInstancesPerNode"]) + "," + str(jsonOBJ["maxInstancesPerNode"]) +"\n"

                        # Write the results to the file
                        serviceResultFile.write(ln)

                        httpConn.close()
                        
                    #================================================================================================#
                        
                    elif item["type"] == "GPServer":
             
                        # Build the Service URL
                        if folder:
                            sUrl = "/arcgis/admin/services/%s%s.%s" %(folder,item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s%s.%s" %(folder,item["serviceName"], item["type"])))   
                        else:
                            sUrl = "/arcgis/admin/services/%s.%s" %(item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s.%s" %(item["serviceName"], item["type"])))

                        # Submit the request to the server
                        httpConn.request("POST", sUrl, params, headers)

                        # Get the response
                        servResponse = httpConn.getresponse()
                        readData = servResponse.read()
                        jsonOBJ = json.loads(readData)

                        # Build the Service URL to test the running status
                        if folder:
                            statusUrl = "/arcgis/admin/services/%s%s.%s/status" %(folder,item["serviceName"], item["type"])
                        else:
                            statusUrl = "/arcgis/admin/services/%s.%s/status" %(item["serviceName"], item["type"])

                        # Submit the request to the server
                        httpConn.request("POST", statusUrl, params, headers)

                        # Get the response
                        servStatusResponse = httpConn.getresponse()
                        readData = servStatusResponse.read()
                        jsonOBJStatus = json.loads(readData)

                        # Variables
                        jobsDir = str(jsonOBJ["properties"]["jobsDirectory"])

                        # Build the line to write to the output file                       
                        ln = str(jsonOBJ["serviceName"]) + "," + folder + "," + str(item["type"]) + "," + jsonOBJStatus['realTimeState'] + "," + "NA" + "," + "NA" + "," + "NA" + "," + "NA" + "," + "NA" + "," + mapservices_URL + "," + "NA"  + "," + jobsDir + "," + str(jsonOBJ["properties"]["outputDir"]) + "," + "NA" + "," + "NA"+ "," + "NA"+ "," + str(jsonOBJ["minInstancesPerNode"]) + "," + str(jsonOBJ["maxInstancesPerNode"]) +"\n"

                        # Write the results to the file
                        serviceResultFile.write(ln)
                        
                        httpConn.close()
                        
                    #================================================================================================#
                        
                    elif item["type"] == "GeocodeServer":

                        # Build the Service URL
                        if folder:
                            sUrl = "/arcgis/admin/services/%s%s.%s" %(folder,item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s%s.%s" %(folder,item["serviceName"], item["type"]))) 
                        else:
                            sUrl = "/arcgis/admin/services/%s.%s" %(item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s.%s" %(item["serviceName"], item["type"])))

                        # Submit the request to the server
                        httpConn.request("POST", sUrl, params, headers)

                        # Get the response
                        servResponse = httpConn.getresponse()
                        readData = servResponse.read()
                        jsonOBJ = json.loads(readData)

                        if folder:
                            statusUrl = "/arcgis/admin/services/%s%s.%s/status" %(folder,item["serviceName"], item["type"])
                        else:
                            statusUrl = "/arcgis/admin/services/%s.%s/status" %(item["serviceName"], item["type"])

                        # Submit the request to the server
                        httpConn.request("POST", statusUrl, params, headers)

                        # Get the response
                        servStatusResponse = httpConn.getresponse()
                        readData = servStatusResponse.read()
                        jsonOBJStatus = json.loads(readData)

                        # Build the line to write to the output file
                        ln = str(jsonOBJ["serviceName"]) + "," + folder + "," + str(item["type"]) + "," + jsonOBJStatus['realTimeState'] + "," + "NA" + "," + "NA" + "," + "NA" + "," + "NA" + "," + "NA" + "," + mapservices_URL + "," + "NA"  + "," + jobsDir + "," + str(jsonOBJ["properties"]["outputDir"]) + "," + "NA" + "," + "NA" + "," + "NA" + "," + str(jsonOBJ["minInstancesPerNode"]) + "," + str(jsonOBJ["maxInstancesPerNode"]) +"\n"

                        # Write the results to the file
                        serviceResultFile.write(ln)
                        
                        httpConn.close()
                        
                    #================================================================================================#
                        
                    elif item["type"] == "GeoDataServer":
     
                        # Build the Service URL
                        if folder:
                            sUrl = "/arcgis/admin/services/%s%s.%s" %(folder,item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s%s.%s" %(folder,item["serviceName"], item["type"])))
                        else:
                            sUrl = "/arcgis/admin/services/%s.%s" %(item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s.%s" %(item["serviceName"], item["type"])))
                        
                        # Submit the request to the server
                        httpConn.request("POST", sUrl, params, headers)

                        # Get the response
                        servResponse = httpConn.getresponse()
                        readData = servResponse.read()
                        jsonOBJ = json.loads(readData)

                        if folder:
                            statusUrl = "/arcgis/admin/services/%s%s.%s/status" %(folder,item["serviceName"], item["type"])
                        else:
                            statusUrl = "/arcgis/admin/services/%s.%s/status" %(item["serviceName"], item["type"])

                        # Submit the request to the server
                        httpConn.request("POST", statusUrl, params, headers)

                        # Get the response
                        servStatusResponse = httpConn.getresponse()
                        readData = servStatusResponse.read()
                        jsonOBJStatus = json.loads(readData)

                        # Build the line to write to the output file
                        ln = str(jsonOBJ["serviceName"]) + "," + folder + "," + str(item["type"]) + "," + jsonOBJStatus['realTimeState'] + "," + "NA"          + "," + "NA"     + "," + "NA"     + "," + "NA"       + "," + "NA"       + "," + mapservices_URL + "," + "NA"  + "," + jobsDir + "," + str(jsonOBJ["properties"]["outputDir"]) + "," + "NA" + "," + str(jsonOBJ["properties"]["maxRecordCount"]) + "," + str(jsonOBJ["minInstancesPerNode"]) + "," + str(jsonOBJ["maxInstancesPerNode"]) +"\n"

                        # Write the results to the file
                        serviceResultFile.write(ln)
                        
                        httpConn.close()

                    #================================================================================================#
                    elif item["type"] == "MapServer":
               
                        # Build the Service URL
                        if folder:
                            sUrl = "/arcgis/admin/services/%s%s.%s" %(folder,item["serviceName"], item["type"])                                                                
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s%s.%s" %(folder,item["serviceName"], item["type"])))
                        else:
                            sUrl = "/arcgis/admin/services/%s.%s" %(item["serviceName"], item["type"])
                            mapservices_URL = r'{0}/{1}'.format(ags_services_URL,("%s.%s" %(item["serviceName"], item["type"])))
                            
                        # Submit the request to the server
                        httpConn.request("POST", sUrl, params, headers)

                        # Get the response
                        servResponse = httpConn.getresponse()
                        readData = servResponse.read()
                        jsonOBJ = json.loads(readData)

                        # Build the Service URL to test the running status
                        if folder:
                            statusUrl = "/arcgis/admin/services/%s%s.%s/status" %(folder,item["serviceName"], item["type"])
                        else:
                            statusUrl = "/arcgis/admin/services/%s.%s/status" %(item["serviceName"], item["type"])

                        # Submit the request to the server
                        httpConn.request("POST", statusUrl, params, headers)

                        # Get the response
                        servStatusResponse = httpConn.getresponse()
                        readData = servStatusResponse.read()
                        jsonOBJStatus = json.loads(readData)
                        
                        # Section for retriving info from manifest.json
                        '''
                        Return service manifest, based on this url
                        http://localhost:6080/arcgis/admin/services/servicename.MapServer/iteminfo/manifest/manifest.xml
                        a shorter version of manifest can be obtained from a JSON manifest, available via REST API:
                        http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#//02r3000001vt000000
                        '''
                        
                        # Filter out Hosted and SampleWorldCities services
                        servCount+=1
                        print str(servCount)+': '+folder+jsonOBJ["serviceName"]+"\n"                        
                        if folder == "Hosted/":
                            print 'Hosted serivces do not have a manifest.json'
                            sourceDB = "NA"
                            documents = "NA"
                            datasets = "NA"
                            clientName = "NA"

                        elif item["serviceName"] == "SampleWorldCities":
                            continue
                        
                        else:
                            # Build Url to manifest.json file
                            metadataUrl = '{0}/iteminfo/manifest/manifest.json'.format(sUrl)
                            # Submit the request to the server
                            httpConn.request("POST", metadataUrl, params, headers)
                            # Get the response
                            servManifestResponse = httpConn.getresponse()
                            readData = servManifestResponse.read()
                            jsonOBJManifest = json.loads(readData)
                            # Get iteminfo fron manifest.json
                            sourceDB = get_connection(jsonOBJManifest)
                            documents = (get_resource(jsonOBJManifest))['onPremisePath']
                            clientName = (get_resource(jsonOBJManifest))['clientName']
                            datasets = get_datasets(jsonOBJManifest) 

                        # Check for Map Cache
                        isCached = jsonOBJ["properties"]["isCached"]
                        if isCached == "true":
                            cacheDir = str(jsonOBJ["properties"]["cacheDir"])
                        else:
                            cacheDir = jsonOBJ["properties"]["isCached"]

                        if len(jsonOBJ["extensions"]) == 0:
                            # Build the line to write to the output file
                            ln = str(jsonOBJ["serviceName"]) + "," + folder + "," + str(item["type"]) + "," + jsonOBJStatus['realTimeState'] + "," + "FeatServHolder" + "," + sourceDB + "," + datasets + "," + documents + "," + clientName + "," + mapservices_URL + "," + cacheDir + "," + "NA" + "," + str(jsonOBJ["properties"]["outputDir"])+ "," + "Disabled" +"," + "Disabled" +"," + str(jsonOBJ["properties"]["maxRecordCount"]) + "," + str(jsonOBJ["minInstancesPerNode"]) + "," + str(jsonOBJ["maxInstancesPerNode"]) +"\n"
                        else:
                            # Extract the KML properties from the response
                            kmlProps = [mapKML for mapKML in jsonOBJ["extensions"] if mapKML["typeName"] == 'KmlServer']#.items()[0][1] == 'KmlServer']

                            # Extract the WMS properties from the response
                            wmsProps = [mapWMS for mapWMS in jsonOBJ["extensions"] if mapWMS["typeName"] == 'WMSServer']#.items()[0][1] == 'WMSServer']

                            # Extract the FeatureService properties from the response
                            featServProps = [featServ for featServ in jsonOBJ["extensions"] if featServ["typeName"] == 'FeatureServer']#.items()[0][1] == 'FeatureServer']

                            if len(featServProps) > 0:
                                featureStatus = str(featServProps[0]["enabled"])
                            else:
                                featureStatus = "NA"

                            if len(kmlProps) > 0:
                                kmlStatus = str(kmlProps[0]["enabled"])
                            else:
                                kmlStatus = "NA"

                            if len(wmsProps) > 0:
                                wmsStatus = str(wmsProps[0]["enabled"])
                            else:
                                wmsStatus = "NA"

    
                            ln = str(jsonOBJ["serviceName"]) + "," + folder + "," + str(item["type"]) + "," + jsonOBJStatus['realTimeState'] + "," + featureStatus + "," + sourceDB + "," + datasets + "," + documents  + "," + clientName + "," + mapservices_URL + "," + cacheDir + "," + "NA" + "," + str(jsonOBJ["properties"]["outputDir"]) + "," + wmsStatus + "," + kmlStatus + "," + str(jsonOBJ["properties"]["maxRecordCount"]) + "," + str(jsonOBJ["minInstancesPerNode"]) + "," + str(jsonOBJ["maxInstancesPerNode"]) +"\n"
                        
                        # Write the results to the file
                        serviceResultFile.write(ln)
                        ## print(ln)
                        
                    else:
                        # Close the connection to the current service
                        httpConn.close()
                    #================================================================================================#
                
    serviceResultFile.close()

    # Print Completed
    print 'Proccessing on '+serverName+' completed'
#----------------------------------------------------------------------
def getToken(username, password, serverName, serverPort):
    # Token URL is typically http://server[:port]/arcgis/admin/generateToken
    tokenURL = "/arcgis/admin/generateToken"
    
    params = urllib.urlencode({'username': username, 'password': password, 'client': 'requestip', 'f': 'json'})
    
    headers = {"Content-type": "application/x-www-form-urlencoded", "Accept": "text/plain"}
    
    # Connect to URL and post parameters
    httpConn = httplib.HTTPConnection(serverName, serverPort)
    httpConn.request("POST", tokenURL, params, headers)
    
    # Read response
    response = httpConn.getresponse()
    if (response.status != 200):
        httpConn.close()
        print "Error while fetching tokens from admin URL. Please check the URL and try again."
        return
    else:
        data = response.read()
        httpConn.close()
        
        # Check that data returned is not an error object
        if not assertJsonSuccess(data):            
            return
        
        # Extract the token from it
        token = json.loads(data) 
        return token['token']            

# A function that checks that the input JSON object 
#  is not an error object.

#----------------------------------------------------------------------
def get_connection(jsonOBJManifest):
    '''return database connection string for the service'''
    try:
        conn_db = ''
        for x in jsonOBJManifest['databases']:
            conn_db+=str(x['onPremiseConnectionString'])+"; "
        return(conn_db)
    except Exception:
        pass
        return jsonOBJManifest['databases'][0]['onPremiseConnectionString']
#----------------------------------------------------------------------
def get_datasets(jsonOBJManifest):
    '''return a list of paths to datasets such as feature classes used by service'''
    service_items = ''
    if jsonOBJManifest['databases'][0]['byReference'] == False:
        return 'Service data has been copied'
    else:
        for dbs in jsonOBJManifest['databases']:
            for dts in dbs['datasets']:
                service_items+=str(dts['onServerName'])+"; " 
    return service_items
#----------------------------------------------------------------------
def get_resource(jsonOBJManifest):
    '''return a map document path that was used during the publishing'''
    resources = jsonOBJManifest['resources']
    return resources[0]
#----------------------------------------------------------------------
def assertJsonSuccess(data):
    obj = json.loads(data)
    if 'status' in obj and obj['status'] == "error":
        print "Error: JSON object returns an error. " + str(obj)
        return False
    else:
        return True

if __name__ == '__main__':
    main()
